;; See license.txt for details about licensing.

defpackage geom/gfx:
  import core
  import math
  import collections
  import geom/vec
  import geom/mat
  import geom/box
  import geom/circle
  import geom/polyline
  import geom/polygon
  import geom/mesh
  import geom/triangle
  import geom/line-segment
  import geom/pixels
  import geom/bounded
  import geom/poseable
  import geom/assembly
  import geom/geom
  import geom/arc-ball
  import gfx/gl
  import gfx/drawing
  import gfx/font

extern glLoadMatrixd: (ptr<double>) -> int
extern glMultMatrixd: (ptr<double>) -> int

public defmulti render (g:Geom) -> False

public defn compile (g:Geom) -> DisplayList :
  val dl = gl-gen-list()
  gl-new-list(dl, GL-COMPILE)
  render(g)
  gl-end-list(dl)
  dl

defmethod render (p:Vec3) -> False :
  gl-begin(GL-POINTS)
  gl-vertex(p)
  gl-end()

defmethod render (p:Vec2) -> False :
  gl-begin(GL-POINTS)
  gl-vertex(p)
  gl-end()

defmethod render (box:Box3) -> False :
  gl-begin(GL-LINE-LOOP)
  gl-vertex(lo(box))
  gl-vertex(hi(box))
  gl-end()

defmethod render (msg:Msg) -> False :
  draw-text(2.0, 2.0, *font*, value(msg))

defmethod render (poly:PolyLine3) -> False :
  gl-push-attrib(GL-CURRENT-BIT)
  gl-color(color(poly))
  for s in strokes(poly) do :
    gl-begin(GL-LINE-STRIP)
    for p in s do :
      gl-vertex(p)
    gl-end()
  gl-pop-attrib()

defmethod render (poly:PolyLine2) -> False :
  gl-push-attrib(GL-CURRENT-BIT)
  gl-color(color(poly))
  for s in strokes(poly) do :
    gl-begin(GL-LINE-STRIP)
    for p in s do :
      gl-vertex(p)
    gl-end()
  gl-pop-attrib()

defmethod render (seg:LineSegment2) -> False :
  gl-begin(GL-LINES)
  gl-vertex(start(seg))
  gl-vertex(end(seg))
  gl-end()

defmethod render (seg:LineSegment3) -> False :
  gl-begin(GL-LINES)
  gl-vertex(start(seg))
  gl-vertex(end(seg))
  gl-end()

defmethod render (tri:Triangle) -> False :
  gl-begin(GL-LINE-LOOP)
  for p in vertices(tri) do :
    gl-vertex(p)
  gl-end()

defmethod render (c:Circle) -> False :
  gl-begin(GL-LINE-LOOP)
  gl-translate(center(c))
  draw-circle(radius(c))
  gl-end()

defmethod render (contour:Contour) -> False :
  gl-begin(GL-LINE-LOOP)
  for p in vertices(contour) do :
    gl-vertex(p)
  gl-end()

defmethod render (poly:Polygon) -> False :
  gl-push-attrib(GL-CURRENT-BIT)
  gl-color(color(poly))
  for c in contours(poly) do :
    render(c)
  gl-pop-attrib()

defmethod render (a:Assembly) -> False :
  gl-push-attrib(GL-CURRENT-BIT)
  gl-color(color(a))
  gl-push-matrix()
  gl-mult-matrix(mat(a))
  for c in children(a) do :
    render(c)
  gl-pop-matrix()
  gl-pop-attrib()

defmethod render (mesh:Mesh) -> False :
  val verts = vertices(mesh)
  gl-push-attrib(GL-LINE-BIT | GL-CURRENT-BIT)
  gl-color(color(mesh))
  for t in faces(mesh) do :
    gl-begin(GL-TRIANGLES)
    gl-vertex(verts[x(t)])
    gl-vertex(verts[y(t)])
    gl-vertex(verts[z(t)])
    gl-end()
  gl-line-width(2.0)
  gl-color(0.5, 0.2, 0.2, 0.4)
  for t in faces(mesh) do :
    gl-begin(GL-LINE-LOOP)
    gl-vertex(verts[x(t)])
    gl-vertex(verts[y(t)])
    gl-vertex(verts[z(t)])
    gl-end()
  gl-pop-attrib()

defmethod render (cells:Pixels) :
  gl-push-attrib(GL-LINE-BIT | GL-CURRENT-BIT)
  val dim = dim(cells)
  gl-push-matrix()
  val dims = idims(cells)
  val ext = 0.5 * dim * to-vec3(dims)
  gl-push-matrix()
  val off = -1.0 * ext + xyz(Vec2-fill(0.5 * dim))
  gl-translate(x(off), y(off), 0.0)
  for pos in indices(dims) do :
    gl-push-matrix()
    val p = to-vec3(pos)
    val c = cells[pos]
    gl-translate(x(p) * dim, y(p) * dim, 0.0)
    gl-scale(0.95, 0.95, 0.95)
    gl-color(to-double $ c, 0.0, 0.0, 0.8)
    draw-quad(dim, dim)
    gl-pop-matrix()
  gl-pop-matrix()
  gl-color(1.0, 1.0, 1.0, 1.0)
  draw-rect(to-double(x(dims)) * dim, to-double(y(dims)) * dim)
  gl-pop-matrix()
  gl-pop-attrib()

defmethod render (g:GeomGroup) :
  do(render, elts(g))

public lostanza defn gl-load-matrix (m:ref<Mat4>) -> ref<False> :
  call-c glLoadMatrixd(addr!(m.m00))
  return false

public lostanza defn gl-mult-matrix (m:ref<Mat4>) -> ref<False> :
  call-c glMultMatrixd(addr!(m.m00))
  return false

public defn render-begin (t:Transformation) :
  gl-matrix-mode(GL-PROJECTION)
  gl-push-matrix()
  gl-translate(mov(t))
  gl-scale(mag(t), mag(t), mag(t))
  gl-matrix-mode(GL-MODELVIEW)
  gl-push-matrix()
  gl-mult-matrix(rot(ball(t)))

public defn render-model-begin (t:Transformation) :
  gl-matrix-mode(GL-PROJECTION)
  gl-push-matrix()
  gl-matrix-mode(GL-MODELVIEW)
  gl-push-matrix()
  ;; gl-translate(mov(t))
  ;; gl-scale(mag(t), mag(t), mag(t))
  val imov = -1.0 * mov(t) / mag(t)
  val imag =  1.0 / mag(t)
  gl-translate(imov)
  gl-scale(imag, imag, imag)
  gl-mult-matrix(rot(ball(t)))

public defn render-end (t:Transformation) :
  gl-pop-matrix()
  gl-matrix-mode(GL-PROJECTION)
  gl-pop-matrix()
  gl-matrix-mode(GL-MODELVIEW)


