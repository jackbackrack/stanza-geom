defpackage geom/polyhedra :
  import core
  import collections
  import math
  import geom/vec
  import geom/polyhedron

;; TETRAHEDRON

; 1
;   3 0
; 2

public val tet-mesh =
  Polyhedron([Vec3( 1.0 * sqrt(8.0 / 9.0),                    0.0, -1.0 / 3.0),
              Vec3(-1.0 * sqrt(2.0 / 9.0),  1.0 * sqrt(2.0 / 3.0), -1.0 / 3.0),
              Vec3(-1.0 * sqrt(2.0 / 9.0), -1.0 * sqrt(2.0 / 3.0), -1.0 / 3.0),
              Vec3(                   0.0,                    0.0,        1.0)]
             [[0, 1, 2], [1, 0, 3], [1, 3, 2], [2, 3, 0]],
             acos(1.0 / 3.0),
             PI / 3.0
             atan(sqrt(2.0)))

public val cube-mesh =
  Polyhedron([Vec3(-1.0, -1.0, -1.0), ; 0
              Vec3(-1.0,  1.0, -1.0), ; 1
              Vec3( 1.0,  1.0, -1.0), ; 2
              Vec3( 1.0, -1.0, -1.0), ; 3
              Vec3(-1.0, -1.0,  1.0), ; 4
              Vec3(-1.0,  1.0,  1.0), ; 5
              Vec3( 1.0,  1.0,  1.0), ; 6
              Vec3( 1.0, -1.0,  1.0)] ; 7
             [[0, 3, 2, 1], [4, 5, 6, 7],
              [5, 4, 0, 1], [7, 6, 2, 3],
              [0, 4, 7, 3], [6, 5, 1, 2]]
             acos(1.0 / 3.0),
             PI / 3.0
             atan(sqrt(2.0)))

public defn fab-dodecahedron () :
  val p  = (1.0 + sqrt(5.0)) / 2.0
  val ip = 1.0 / p
  val np = -1.0 * p
  val nip = -1.0 * ip
  ; println("PHI %_ IPHI %_" % [p, ip])
  Polyhedron([;orange
              Vec3(-1.0, -1.0, -1.0),
              Vec3( 1.0, -1.0, -1.0),
              Vec3(-1.0,  1.0, -1.0),
              Vec3( 1.0,  1.0, -1.0),
              Vec3(-1.0, -1.0,  1.0),
              Vec3( 1.0, -1.0,  1.0),
              Vec3(-1.0,  1.0,  1.0),
              Vec3( 1.0,  1.0,  1.0),
              ;green
              Vec3( 0.0,    np,   nip),
              Vec3( 0.0,     p,   nip),
              Vec3( 0.0,    np,    ip),
              Vec3( 0.0,     p,    ip),
              ;blue
              Vec3(  nip,  0.0,    np),
              Vec3(   ip,  0.0,    np),
              Vec3(  nip,  0.0,     p),
              Vec3(   ip,  0.0,     p),
              ;green
              Vec3(   np,   nip,  0.0),
              Vec3(    p,   nip,  0.0),
              Vec3(   np,    ip,  0.0),
              Vec3(    p,    ip,  0.0)],
             [;[13 12 2 9 3]  ;A
              [3 9 2 12 13]  ;A
              [12 0 8 1 13]  ;B
              [13 1 17 19 3] ;C
              [19 7 11 9 3]  ;D
              ;[11 9 2 18 6]  ;E
              [6 18 2 9 11]  ;E
              ;[18 2 12 0 16] ;F
              [16 0 12 2 18] ;F
              [17 1 8 10 5]  ;G
              [19 17 5 15 7] ;H
              [15 14 6 11 7] ;I
              ;[14 6 18 16 4] ;J
              [4 16 18 6 14] ;J
              ;[15 14 4 10 5] ;K
              [5 10 4 14 15] ;K
              ;[10 4 16 0 8]  ;L
              [8 0 16 4 10]  ;L
             ]
             acos(-1.0 / sqrt(5.0)),
             PI / 3.0,
             acos(-1.0 / sqrt(5.0))) ;TODO: APPROX

public val dodecahedron = fab-dodecahedron()

public defn fab-rhombic-dodecahedron () :
  val faces =
    [[3 4 5 10],
     [3 13 11 4],
     [3 0 2 13],
     [3 10 1 0],
     [6 7 2 8],
     [6 8 1 9],
     [6 9 5 12],
     [6 12 11 7],
     [2 7 11 13],
     [11 12 5 4],
     [5 9 1 10],
     [1 8 2 0]]

  Polyhedron([Vec3(-1.0, -1.0, 1.0),  ; 0
              Vec3(-2.0, 0.0, -0.0),  ; 1
              Vec3(0.0, -2.0, 0.0),   ; 2 
              Vec3(0.0, 0.0, 2.0),    ; 3 
              Vec3(1.0, 1.0, 1.0),    ; 4
              Vec3(0.0, 2.0, 0.0),    ; 5
              Vec3(0.0, 0.0, -2.0),   ; 6
              Vec3(1.0, -1.0, -1.0),  ; 7
              Vec3(-1.0, -1.0, -1.0), ; 8
              Vec3(-1.0, 1.0, -1.0),  ; 9
              Vec3(-1.0, 1.0, 1.0),   ; 10
              Vec3(2.0, 0.0, 0.0),    ; 11
              Vec3(1.0, 1.0, -1.0),   ; 12
              Vec3(1.0, -1.0, 1.0)]   ; 13
             to-tuple $ for face in faces seq :
               to-tuple $ reverse $ to-list $ face
             120.0 / 180.0 * PI,
             PI / 3.0,
             120.0 / 180.0 * PI)

public val rhombic-dodecahedron = fab-rhombic-dodecahedron()
