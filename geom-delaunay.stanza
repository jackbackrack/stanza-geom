defpackage geom/delaunay :
  import core
  import collections
  import utils/seqable
  import geom/utils
  import geom/vec
  import geom/box
  import geom/polygon
  import geom/poseable
  import geom/implicit-line
  import utils/edits

val vertex-ids = to-seq(0 to false)

public defn skip-vertex-ids (id:Int) :
  let loop () : loop() when next(vertex-ids) < id

public defstruct Vertex <: Equalable&Hashable :
  id : Int
  value : Vec2

public defn Vertex (v:Vec2) : Vertex(next(vertex-ids), v)

defmethod print (o:OutputStream, v:Vertex) :
  print(o, "VERTEX(ID %_, VALUE %_)" % [id(v), value(v)])

defmethod equal? (a:Vertex, b:Vertex) : id(a) == id(b)
defmethod hash (a:Vertex) : hash(id(a))

val edge-ids = to-seq(0 to false)

public defstruct Edge <: Equalable&Hashable :
  id : Int
  num : Int
  #next : False|Edge with: ( setter => #set-next )
  #data : False|Vertex with: ( setter => #set-data )
  quad : QuadEdge

public defn set-next (e:Edge, n:Edge) :
  add-do-edit(SlotEdit("Next", e, #next(e), n, #set-next))

public defn set-data (e:Edge, v:Vertex) :
  if constrained?(quad(e)) : println("CHANGING CONSTRAINED EDGE %_ ORG" % [e])
  add-do-edit(SlotEdit("Data", e, #data(e), v, #set-data))

public defn Edge (s:Subdivision, id:Int, num:Int, quad:QuadEdge) -> Edge :
  val e = Edge(id, num, false, false, quad)
  add-edge-callback(s)(e)
  e

defmethod print (o:OutputStream, e:Edge) :
  defn maybe-next-id (e:Edge) : -1 when #next(e) is False else id(next(e))
  print(o, "EDGE(ID %_, NUM %_, NEXT %_, ORG %_)" % [id(e), num(e), maybe-next-id(e), #data(e)])

public defn next (e:Edge) : #next(e) as Edge
public defn data (e:Edge) : #data(e) as Vertex

public defn center (e:Edge) -> Vec2 :
  0.5f * (value(org(e)) + value(dest(e)))

defn Edge (s:Subdivision) :
  edges(QuadEdge(s))[0]

defn Edge (s:Subdivision, a:Vertex, b:Vertex) :
  val e = edges(QuadEdge(s))[0]
  set-end-points(s, e, a, b)
  e

defmethod equal? (a:Edge, b:Edge) : id(a) == id(b)
defmethod hash (a:Edge) : hash(id(a))

public defn length (e:Edge) -> Double : magnitude(value(org(e)) - value(dest(e)))

val quad-edge-ids = to-seq(0 to false)

public defstruct QuadEdge <: Equalable&Hashable :
  id : Int
  constrained? : True|False with: ( setter => #set-constrained? )
  edges : Tuple<Edge> with: ( setter => set-edges )
  data : ? with: ( init => false, setter => #set-data )

public defn set-constrained? (e:QuadEdge, x:True|False) :
  add-do-edit(SlotEdit("Constrained?", e, constrained?(e), x, #set-constrained?))

defmethod equal? (a:QuadEdge, b:QuadEdge) : id(a) == id(b)
defmethod hash (a:QuadEdge) : hash(id(a))

defmethod print (o:OutputStream, q:QuadEdge) :
  print(o, "QUADeDGE(ID %_)" % [id(q)])
  ;; print(o, "QUADeDGE(ID %_, EDGES %,_)" % [id(q), edges(q)])

defn QuadEdge (s:Subdivision) :
  val q = QuadEdge(next(quad-edge-ids), false, [])
  val es = to-tuple $ for i in 0 to 4 seq :
    Edge(s, next(edge-ids), i, q)
  set-edges(q, es)
  set-next(es[0], es[0])
  set-next(es[1], es[3])
  set-next(es[2], es[2])
  set-next(es[3], es[1])
  q

public defn set-data (e:QuadEdge, d:?) :
  add-do-edit(SlotEdit("QuadData", e, data(e), d, #set-data))

public defn edges (s:Subdivision) -> Seqable<Edge> :
  edges(starting-edge(s))

defn set-not-exists?<?T> (h:HashSet<?T>, e:?T) -> True|False :
  if h[e] :
    false
  else :
    add(h, e)
    true

public defn edges (i:Edge) -> Seqable<Edge> :
  generate<Edge> :
    val visited? = HashSet<Edge>()
    let loop (e:Edge = i) :
      if set-not-exists?(visited?, e) :
        yield(e)
        loop(onext(e))
        loop(oprev(e))
        loop(dnext(e))
        loop(dprev(e))

public defn all-edges (i:Edge) -> Seqable<Edge> :
  generate<Edge> :
    val visited? = HashSet<Edge>()
    let loop (e:Edge = i) :
      if set-not-exists?(visited?, e) :
        yield(e)
        loop(next(e))
        val elts = edges(quad(e))
        loop(elts[0])
        loop(elts[1])
        loop(elts[2])
        loop(elts[3])

public defn all-edges (s:Subdivision) -> Seqable<Edge> :
  all-edges(starting-edge(s))

public defn all-quad-edges (i:Edge) -> Seqable<QuadEdge> :
  seq(quad, unique(quad, edges(i)))

public defn all-quad-edges (s:Subdivision) : all-quad-edges(starting-edge(s))

public defn dump (s:Subdivision) :
  println("DUMP")
  for e in edges(s) do :
    println("  %_" % [e])

public defn rot (e:Edge) :
  edges(quad(e))[num(e) + 1] when num(e) < 3 else edges(quad(e))[num(e) - 3]

public defn inv-rot (e:Edge) : 
  edges(quad(e))[num(e) - 1] when num(e) > 0 else edges(quad(e))[num(e) + 3]
  
public defn sym (e:Edge) : 
  edges(quad(e))[num(e) + 2] when num(e) < 2 else edges(quad(e))[num(e) - 2]

public defn onext (e:Edge) :
  next $ e

public defn oprev (e:Edge) :
  rot $ onext $ rot $ e

public defn dnext (e:Edge) :
  sym $ onext $ sym $ e

public defn dprev (e:Edge) :
  inv-rot $ onext $ inv-rot $ e

public defn lnext (e:Edge) :
  rot $ onext $ inv-rot $ e

public defn edges-of (ie:Edge, nxt:Edge -> Edge) -> Seq<Edge> :
  var e:Edge = ie
  var start?:True|False = true
  new Seq<Edge> :
    defmethod next (this) :
      val e0 = e
      start? = false
      e = nxt(e)
      e0
    defmethod empty? (this) : not start? and e == ie
    defmethod peek (this) : e

public defn left-face-edges (ie:Edge) : edges-of(ie, lnext)
public defn right-face-edges (ie:Edge) : edges-of(ie, rnext)
public defn face-edges (ie:Edge) : edges-of(ie, lnext)
public defn face-neighbors (ie:Edge) -> Seq<Edge> :
  for e in seq(sym, edges-of(ie, lnext)) filter : e != false 
public defn origin-edges (ie:Edge) : edges-of(ie, onext)

public defn lprev (e:Edge) :
  sym $ onext $ e

public defn rnext (e:Edge) :
  inv-rot $ onext $ rot $ e

public defn rprev (e:Edge) :
  onext $ sym $ e

public defn org (e:Edge) :
  data $ e

public defn dest (e:Edge) :
  data $ sym $ e

defn set-org (e:Edge, p:Vertex) :
  set-data(e, p)

defn set-dest (e:Edge, p:Vertex) :
  set-data(sym(e), p)

defn #set-end-points (e:Edge, org:Vertex, dst:Vertex) :
  if constrained?(quad(e)) : println("CHANGING CONSTRAINED EDGE %_ VERTICES" % [e])
  set-data(e,      org)
  set-data(sym(e), dst)

defn set-end-points (s:Subdivision, e:Edge, org:Vertex, dst:Vertex) :
  #set-end-points(e, org, dst)
  mov-edge-callback(s)(e)

defn end-points (e:Edge) -> [Vertex, Vertex]:
  [data(e), data(sym(e))]

defn splice (a:Edge, b:Edge) :
  ;; if constrained?(quad(a)) or constrained?(quad(b)) :
  ;;   println("WARNING TRYING TO SPLICE CONSTRAINED EDGE")
  val alpha = rot $ onext $ a
  val beta  = rot $ onext $ b
  val t1 = onext $ b
  val t2 = onext $ a
  val t3 = onext $ beta
  val t4 = onext $ alpha
  set-next(a, t1)
  set-next(b, t2)
  set-next(alpha, t3)
  set-next(beta, t4)

defn delete-edge (e:Edge) :
  splice(e,      oprev(e))
  splice(sym(e), oprev(sym(e)))
  
defn delete-edge (s:Subdivision, e:Edge) :
  if quad(starting-edge(s)) == quad(e) :
    ;; warning("Subdivision: attempting to delete starting edge")
    set-starting-edge(s, onext(e) when e != onext(e) else dnext(e))
  val old-sym = sym(e)
  delete-edge(e)
  del-edge-callback(s)(e)
  del-edge-callback(s)(old-sym)
  
public defstruct Subdivision :
  #starting-edge : False|Edge with: ( setter => #set-starting-edge, init => false )
  add-edge-callback : ( Edge -> False ) with: ( init => { false }, setter => set-add-edge-callback )
  del-edge-callback : ( Edge -> False ) with: ( init => { false }, setter => set-del-edge-callback )
  mov-edge-callback : ( Edge -> False ) with: ( init => { false }, setter => set-mov-edge-callback )

public defn set-starting-edge (sub:Subdivision, e:False|Edge) :
  add-do-edit(SlotEdit("StartingEdge", sub, #starting-edge(sub), e, #set-starting-edge))

public defn starting-edge (s:Subdivision) : #starting-edge(s) as Edge

defmethod print (o:OutputStream, s:Subdivision) :
  print(o, "SUBDIVISION(%_)" % [#starting-edge(s)])

public defn Subdivision (va:Vertex, vb:Vertex, vc:Vertex) :
  val s = Subdivision()
  val ea = Edge(s)
  set-end-points(s, ea, va, vb)
  val eb = Edge(s)
  splice(sym(ea), eb)
  set-end-points(s, eb, vb, vc)
  val ec = Edge(s)
  splice(sym(eb), ec)
  set-end-points(s, ec, vc, va)
  splice(sym(ec), ea)
  set-starting-edge(s, ea)
  s

public defn boundary-points (bounds:Box2) -> Seqable<Vec2> :
  val dims = dims(bounds)
  val ctr = center(bounds)
  val radius = magnitude(dims)
  val poly = mov(xyz $ ctr, polygon-n(2.1f * radius, 3))
  vertices $ contours(poly)[0]

public defn boundary-points (verts:Tuple<Vertex>) -> Seqable<Vec2> :
  val points = to-tuple $ seq(value, verts)
  boundary-points(reduce(bit-or, seq(Box2, points)))

public defn Subdivision (ivertices:Seqable<Vertex>, boundary-verts:Tuple<Vertex>) :
  val verts = to-tuple $ ivertices
  ;; println("RADIUS %_ POLY %_" % [radius, poly])
  val sub = Subdivision(boundary-verts[0], boundary-verts[1], boundary-verts[2])
  ;; dump(sub)
  for vertex in verts do :
    constrained-insert-site(sub, vertex, 0.0f)
  sub

public defn Subdivision (ivertices:Seqable<Vertex>) :
  val verts = to-tuple $ ivertices
  Subdivision(verts, to-tuple $ seq(Vertex, boundary-points(verts)))

public defn Subdivision (ipoints:Seqable<Vec2>) :
  Subdivision(seq(Vertex, ipoints))

defn connect (s:Subdivision, a:Edge, b:Edge) :
  ;; if constrained?(quad(a)) or constrained?(quad(b)) :
  ;;   println("WARNING TRYING TO CONNECT CONSTRAINED EDGE")
  val e = Edge(s)
  splice(e, lnext(a))
  splice(sym(e), b)
  set-end-points(s, e, dest(a), org(b))
  e

defn swap (s:Subdivision, e:Edge) :
  val a = oprev(e)
  val b = oprev(sym(e))
  ;; if constrained?(quad(e)) or constrained?(quad(a)) or constrained?(quad(b)) :
  ;;   println("WARNING TRYING TO SWAP CONSTRAINED EDGE")
  splice(e,      a)
  splice(sym(e), b)
  splice(e,      lnext(a))
  splice(sym(e), lnext(b))
  set-end-points(s, e, dest(a), dest(b))

defn snap (x:Vec2, a:Vec2, b:Vec2) -> Vec2 :
  if x == a :
    a
  else if x == b :
    b
  else :
    val t1 = dot(x - a, b - a)
    val t2 = dot(x - b, a - b)
    val t = max(t1, t2) / (t1 + t2)
    ((1.0f - t) * a + t * b) when (t1 > t2) else ((1.0f - t) * b + t * a)

defn split-edge (s:Subdivision, e:Edge, vx:Vertex) -> Vertex :
  ;; println("SPLIT-EDGE %_ DEST %_ VX %_" % [e, dest(e), vx])
  val x = value(vx)
  val dt =
    if constrained?(quad(e)) :
      Vertex(snap(x, value(org(e)), value(dest(e))))
    else :
      vx
  val t = lnext(e)
  splice(sym(e), t)
  set-end-points(s, e, org(e), dt)
  val ne = connect(s, e, t)
  if constrained?(quad(e)) :
    set-constrained?(quad(e), true)
  dt
    
defn split-edge (s:Subdivision, e:Edge, x:Vec2) -> Vertex :
  split-edge(s, e, Vertex(x))

defn warning (m:String) :
  println(m)
  false      

defn tri-area (a:Vec2, b:Vec2, c:Vec2) -> Double :
  (x(b) - x(a)) * (y(c) - y(a)) - (y(b) - y(a)) * (x(c) - x(a))

defn in-circle (a:Vec2, b:Vec2, c:Vec2, d:Vec2) :
  (dot(a, a) * tri-area(b, c, d) -
   dot(b, b) * tri-area(a, c, d) +
   dot(c, c) * tri-area(a, b, d) -
   dot(d, d) * tri-area(a, b, c)) > 0.0f

defn circum-center (a:Vec2, b:Vec2, c:Vec2) :
  val d1 = dot(b - a, c - a) 
  val d2 = dot(b - c, a - c) 
  val d3 = dot(a - b, c - b)
  val c1 = d2 * d3
  val c2 = d3 * d1
  val c3 = c1 * d2
  ((c2 + c3) * a + (c3 + c1) * c + (c1 + c2) * b) / (2.0f * (c1 + c2 + c3))

defn has-left-face (e:Edge) -> True|False :
  org(lprev(e)) == dest(lnext(e)) and left-of(value(org(lprev(e))), e)

defn has-right-face (e:Edge) -> True|False :
  has-left-face(sym(e))

defn intersect (e:Edge, l:ImplicitLine) :
  intersect(l, value(org(e)), value(dest(e)))

defn ccw (a:Vec2, b:Vec2, c:Vec2) -> True|False :
  tri-area(a, b, c) > 0.0f

defn cw (a:Vec2, b:Vec2, c:Vec2) -> True|False :
  tri-area(a, b, c) < 0.0f

defn inline (a:Vec2, b:Vec2, c:Vec2) -> True|False :
  tri-area(a, b, c) == 0.0f

defn right-of (x:Vec2, e:Edge) -> True|False :
  ccw(x, value(dest(e)), value(org(e)))

defn inline-of (x:Vec2, e:Edge) -> True|False :
  inline(x, value(dest(e)), value(org(e)))

defn left-of (x:Vec2, e:Edge) -> True|False :
  cw(x, value(dest(e)), value(org(e)))

;; defn on-edge (x:Vec2, e:Edge) -> True|False :
;;   val t1 = normalize(x - org(e)
;;   val t2 = normalize(x - dest(e))
;;   if t1 < EPS or t2 < EPS :
;;     true
;;   else :
;;     val t3 = normalize(org(e) - dest(e))
;;     if t1 > t3 or t2 > t3 :
;;       false
;;     else :
;;       val line = Line(org(e), dest(e))
;;       abs(eval(line, x)) < EPS

public defn on-edge-value (p:Vec2, e:Edge) -> Double :
  val op = magnitude(p - value(org(e)))
  val pd = magnitude(p - value(dest(e)))
  val od = magnitude(value(org(e)) - value(dest(e)))
  abs(od - (op + pd))

public defn on-edge (p:Vec2, e:Edge) -> True|False :
  val op = magnitude(p - value(org(e)))
  if op < EPS :
    true
  else :
    val pd = magnitude(p - value(dest(e)))
    if pd < EPS :
      true
    else :
      val od = magnitude(value(org(e)) - value(dest(e)))
      val my-eps = 0.1f * EPS * max(max(op, pd), od)
      abs(od - (op + pd)) < my-eps

public defstruct AlreadyVisitedException <: Exception
defmethod print (o:OutputStream, e:AlreadyVisitedException) :
  print(o, "Edge already visited. Preventing infinite loop.")

public defn locate (s:Subdivision, x:Vec2) -> Edge :
  ;; println("LOCATE %_" % [x])
  val visited = HashSet<Edge>()
  let loop (e:Edge = starting-edge(s)) :
    ;; println("LOOP %_" % [e])
    if not add(visited, e) :
      throw(AlreadyVisitedException())
    if x == value(org(e)) or x == value(dest(e)) :
      e
    else if right-of(x, e) :
      ;; println("RIGHT OF")
      loop(sym(e))
    else if not right-of(x, onext(e)) :
      ;; println("NOT RIGHT OF ONEXT")
      loop(onext(e))
    else if not right-of(x, dprev(e)) :
      ;; println("NOT RIGHT OF DPREV")
      loop(dprev(e))
    else :
      e

defn fix-edge (s:Subdivision, e:Edge) :
  if not constrained?(quad(e)) :
    val [f, g] = [oprev(e), dnext(e)]
    if in-circle(value(dest(e)), value(dest(onext(e))), value(org(e)), value(dest(f))) :
      swap(s, e)
      fix-edge(s, f)
      fix-edge(s, g)

;; Triangulates the left face of first, which is assumed to be closed.
;; It is also assumed that all the vertices of that face lie to the
;; left of last (the edge preceeding first).	
;; This is NOT intended as a general simple polygon triangulation
;; routine. It is called by InsertEdge in order to restore a
;; triangulation after an edge has been inserted.
;; The routine consists of two loops: the outer loop continues as
;; long as the left face is not a triangle. The inner loop examines 
;; successive triplets of vertices, creating a triangle whenever the
;; triplet is counterclockwise.
defn triangulate (s:Subdivision, init-first:Edge) :
  var first:Edge = init-first
  val last = lprev(first)
  
  while lnext(lnext(first)) != last : 
    ;; println("WHILE TRIANGULATE LAST %_" % [last])
    ;; println("FIRST %_ FIRST-DEST %_" % [first, dest(first)])

    var prev:Edge = first
    let loop (e:Edge = lnext(first)) :
      ;; println("  LOOP %_ -> %_" % [e, dest(e)])
      if e != last :
        val next = lnext(e)
        if not (next == last and prev == first) :
          if left-of(value(dest(e)), prev) :
            ;; println("   LEFT-OF %_ %_ -> %_" % [dest(e), prev, dest(prev)])
            val first? = prev == first
            prev = sym(connect(s, e, prev))
            if first? : first = prev
            ;; println("   CONNECTED %_ -> %_" % [prev, dest(prev)])
            val [a, b] = [oprev(prev), dnext(prev)]
            fix-edge(s, a)
            fix-edge(s, b)
          else :
            prev = e
          loop(next)

  ;; println("TRIANGULATE FIXING")
  val [a, b] = [lnext(last), lprev(last)]
  fix-edge(s, a)
  fix-edge(s, b)
  fix-edge(s, last)

public defn insert-site (s:Subdivision, vx:Vertex) -> False|Edge :
  println("INSERT-SITE %_" % [x])
  val x = value(vx)
  var e:Edge = locate(s, x)
  ;; println("FOUND %_" % [e])
  label<False|Edge> return:
    if x == value(org(e)) or x == value(dest(e)) :
      ;; println("POINT ALREADY IN")
      return(false)
    else if on-edge(x, e) :
      ;; println("ON EDGE")
      e = oprev(e)
      delete-edge(s, onext(e))
    ;; println("CONNECT")
    var base:Edge = Edge(s)
    set-end-points(s, base, org(e), vx)
    splice(base, e)
    set-starting-edge(s, base)
    ;; dump(s)
    let loop () :
      ;; println("BASE LOOP")
      base = connect(s, e, sym(base))
      ;; dump(s)
      e = oprev(base)
      loop() when lnext(e) != starting-edge(s)
    while true :
      ;; println("EXAMINE DELAUNAY CONDITION")
      val t = oprev(e)
      if right-of(value(dest(t)), e) and in-circle(value(org(e)), value(dest(t)), value(dest(e)), x) :
        ;; println("SWAP")
        swap(s, e)
        e = oprev(e)
      else if onext(e) == starting-edge(s) :
        ;; println("DONE")
        return(starting-edge(s))
      else :
        ;; println("POP")
        e = lprev(onext(e))

;; VERSION OF TRIANGULATION USING EAR CHECKS TO ENSURE ONLY VALID EARS ARE CLIPPED
defn ear-clipping-triangulate (s:Subdivision, init-first:Edge) :
  ;; println("EAR-CLIPPING-TRIANGULATE")
  var first:Edge = init-first
  val last = lprev(first)
  
  defn convex? (e:Edge) -> True|False :
    ;; println("PT %_ ORG %_ DEST %_" % [value(org(lprev(e))), value(org(e)), value(dest(e))])
    left-of(value(org(lprev(e))), e)

  defn concave? (e:Edge) -> True|False :
    right-of(value(org(lprev(e))), e) or inline-of(value(org(lprev(e))), e)

  defn sign (p1:Vec2, p2:Vec2, p3:Vec2) -> Double :
    (x(p1) - x(p3)) * (y(p2) - y(p3)) - (x(p2) - x(p3)) * (y(p1) - y(p3))

  defn inside? (pt:Vec2, v1:Vec2, v2:Vec2, v3:Vec2) -> True|False :
    val d1 = sign(pt, v1, v2)
    val d2 = sign(pt, v2, v3)
    val d3 = sign(pt, v3, v1)
    val sd1 = d1 >= 0.0f
    val sd2 = d2 >= 0.0f
    val sd3 = d3 >= 0.0f
    ;; val res = sd1 == sd2 and sd2 == sd3
    val res = sd1 and sd2 and sd3
    ;; val has-neg? = (d1 < 0.0f) or (d2 < 0.0f) or (d3 < 0.0f)
    ;; val has-pos? = (d1 > 0.0f) or (d2 > 0.0f) or (d3 > 0.0f)
    ;; not (has-neg? and has-pos?)
    ;; println("PT %_ TRI %_ %_ %_ -> %_ (%_, %_, %_)" % [pt, v1, v2, v3, res, d1, d2, d3])
    res

  defn inside? (p:Vec2, e:Edge) -> True|False :
    inside?(p, value(org(lprev(e))), value(org(e)), value(dest(e)))

  defn ear? (e:Edge) -> True|False :
    ;; println("  >>> EAR? %_ -> %_" % [e, dest(e)])
    if convex?(e) :
      let loop (oe:Edge = lnext(lnext(e))) :
        ;; println("    LOOP %_ -> %_" % [oe, dest(oe)])
        if lnext(oe) == e :
          ;; println("  <<< EAR TRUE")
          true
        else if concave?(oe) :
          if inside?(value(org(oe)), e) :
            ;; println("    CONCAVE AND INSIDE")
            false
          else :
            ;; println("    CONCAVE NOT INSIDE")
            loop(lnext(oe))
        else :
          loop(lnext(oe))
    else :
      ;; println("  <<< NOT CONVEX")
      false
    
  while lnext(lnext(first)) != last : 
    ;; println("WHILE TRIANGULATE LAST %_" % [last])
    ;; println("FIRST %_ FIRST-DEST %_" % [first, dest(first)])

    var prev:Edge = first
    let loop (e:Edge = lnext(first)) :
      ;; println("  LOOP %_ -> %_" % [e, dest(e)])
      if e != last :
        val next = lnext(e)
        if not (next == last and prev == first) :
          if ear?(e) :
            ;; println("   EAR? %_ %_ -> %_" % [dest(e), prev, dest(prev)])
            val first? = prev == first
            prev = sym(connect(s, e, prev))
            if first? : first = prev
            ;; println("   CONNECTED %_ -> %_" % [prev, dest(prev)])
            val [a, b] = [oprev(prev), dnext(prev)]
            fix-edge(s, a)
            fix-edge(s, b)
          else :
            prev = e
          loop(next)

  ;; println("TRIANGULATE FIXING")
  val [a, b] = [lnext(last), lprev(last)]
  fix-edge(s, a)
  fix-edge(s, b)
  fix-edge(s, last)

public defn coincide (a:Vec2, b:Vec2, dist:Double) -> True|False :
  val d = a - b
  if abs(x(d)) > dist or abs(y(d)) > dist :
    false
  else :
    dot(d, d) <= (dist * dist)

public defn delete-site (s:Subdivision, vx:Vertex, dist:Double) : ;; -> [Tuple<Edge>, Tuple<Edge>] :
  ;; println(">>> DELETE-SITE %_" % [vx])
  val one-e = locate(s, value(vx))
  val e = one-e when org(one-e) == vx else sym(one-e)
  ;; if org(e) == vx :
  ;;   println("LOCATED %_ -> %_" % [e dest(e)])
  if org(e) != vx :
    println("!!! DELETE-SITE LOST VX %_ e %_ -> %_" % [vx e dest(e)])
  defn outer-edge (e:Edge) -> Edge :
    val fedges = face-edges(e)
    next(fedges)
    next(fedges)
  val face-edge = outer-edge(e)
  val edges = to-tuple $ origin-edges(e)
  val all-face-edges = to-tuple $ seq(outer-edge, edges)
  val outer-area = area(to-tuple $ seq({ value(org(_)) }, all-face-edges))
  ;; println("FACE-EDGES")
  ;; for e in all-face-edges do :
  ;;   println("  E %~ DEST %~" % [e, dest(e)])
  ;; println("OUTER-AREA %_" % [outer-area])
  ;; val sedges = to-tuple $ seq(onext, seq(sym, origin-edges(e)))
  ;; println("DELETING EDGES")
  for e in edges do :
    ;; println("DELETING %_ -> %_" % [e, dest(e)])
    delete-edge(s, e)
  val start-edge = face-edge
  ;; println("AFTER")
  ;; for e in face-edges(start-edge) do :
  ;;   println("  E %~ DEST %~" % [e, dest(e)])
  ;; for e in face-edges(start-edge) do :
  ;;   print(" %~" % [value(org(e))])
  ;; println("")
  ;; println(">>> TRIANGULATING")
  ear-clipping-triangulate(s, start-edge)
  ;; println("<<< TRIANGULATING")
  ;; val sfedges0 = all-face-edges(sedges)
  ;; defn all-face-edges (sedges:Tuple<Edge>) -> HashSet<Edge> :
  ;;   val oedges = to-tuple $ seq-cat(origin-edges, sedges)
  ;;   to-hashset<Edge> $ cat(oedges, seq(sym, oedges))
  ;; defn sub (es0:HashSet<Edge>, es1:HashSet<Edge>) -> Seq<Edge> :
  ;;   for e0 in es0 filter : not es1[e0]
  ;; val sfedges1 = all-face-edges(sedges)
  ;; val dels = to-tuple $ sub(sfedges0, sfedges1)
  ;; val adds = to-tuple $ sub(sfedges1, sfedges0)
  ;; println("BEFORE %_" % [to-tuple $ lazy-qsort $ seq(id, sfedges0)])  
  ;; println("AFTER  %_" % [to-tuple $ lazy-qsort $ seq(id, sfedges1)])  
  ;; println("DELS   %_" % [to-tuple $ seq(id, dels)])
  ;; println("ADDS   %_" % [to-tuple $ seq(id, adds)])
  ;; [dels, adds]

val trace? = false

public defn constrained-insert-site (s:Subdivision, vx:Vertex, dist:Double) -> False|Edge :
  ;; println(">>> INSERT-SITE %_" % [vx])
  label<False|Edge> return :
    val x = value(vx)
    var e:Edge = locate(s, x)

    if coincide(x, value(org(e)), dist) :
      if trace?: println("COINCIDE ORG")
      return(e)
    if coincide(x, value(dest(e)), dist) :
      if trace?: println("COINCIDE DEST")
      return(sym(e))

    val has-left = has-left-face(e)
    val has-right = has-right-face(e)

    if not has-left and not has-right :
      warning("insert-site: edge does not have any face")
      return(false)

    val is-on-edge = on-edge(x, e)
    val inside-left  = has-left and (is-on-edge or left-of(x, e)) and
                       right-of(x, onext(e)) and right-of(x, dprev(e))
    val inside-right = has-right and (is-on-edge or right-of(x, e)) and
                       left-of(x, oprev(e)) and left-of(x, dnext(e))

    if not inside-left and not inside-right :
      warning(string-join $ ["insert-site: point " vx " not in a face adjacent to edge " e " dest " dest(e)])
      warning(string-join $ ["  IS-ON-EDGE " is-on-edge " ON-EDGE-VALUE " on-edge-value(x, e) " HAS-LEFT " has-left " HAS-RIGHT " has-right])
      return(false)
    
    if inside-left and coincide(x, value(dest(onext(e))), dist) :
      return(lprev(e))

    if inside-right and coincide(x, value(dest(oprev(e))), dist) :
      return(dnext(e))

    ;; Now we know, x lies within the quadrilateral whose diagonal is e
    ;; (or a triangle, if e only has one adjacent face). We also know x
    ;; is not one of e's endpoints.

    if is-on-edge :
      if trace?:  println("IS-ON-EDGE %_ CONSTRAINED? %_" % [e, constrained?(quad(e))])
      val xx = snap(x, value(org(e)), value(dest(e)))
      if coincide(xx, value(org(e)), dist) :
        return(e)
      if coincide(xx, value(dest(e)), dist) :
        return(sym(e))

      if has-right and has-left :
        if trace?: println("HAS-RIGHT AND HAS-LEFT")
        val a = oprev(e)
        val b = dnext(e)
        val c = lnext(e)
        val d = lprev(e)
        split-edge(s, e, vx)
        connect(s, e, lprev(e))
        connect(s, oprev(e), sym(e))
        fix-edge(s, a)
        fix-edge(s, b)
        fix-edge(s, c)
        fix-edge(s, d)
      else :
        if trace?: println("NOT HAS-RIGHT OR NOT HAS-LEFT")
        if has-right :
          e = sym(e)
        val c = lnext(e)
        val d = lprev(e)
        split-edge(s, e, vx)
        connect(s, e, lprev(e))
        fix-edge(s, c)
        fix-edge(s, d)
      set-starting-edge(s, sym(e))
      return(starting-edge(s))
    
    ;; x is not on e, should be in face to the left of e
    if not inside-left :
      warning("insert-site: point is not to the left of edge")
      return(false)

    ;; x should be strictly inside the left face
    ;; if on-edge(x, onext(e)) or on-edge(x, dprev(e)) :
    ;;   warning("insert-site: point is not strictly inside face")

    ;; Now, hopefully, x is strictly inside the left face of e,
    ;; so everything should proceed smoothly from this point on.

    val first = org(e)
    var base:Edge = Edge(s, org(e), vx)
    ;; if constrained?(quad(e)) : println("SPLICING INTO CONSTRAINED EDGE")
    ;; println("SPLICING %_ TO %_" % [base, e])
    splice(base, e)
    ;; use this edge as the starting point next time:
    set-starting-edge(s, sym(base))
    let loop () :
      base = connect(s, e, sym(base))
      ;; println("CONNECTING %_ TO %_" % [e, sym(base)])
      e = oprev(base)
      loop() when dprev(e) != starting-edge(s)

    ;; Examine suspect edges to ensure that the Delaunay condition is satisfied.
    while true :
      ;; println("EXAMINE DELAUNAY CONDITION")
      val t = oprev(e)
      if not constrained?(quad(e)) and
          in-circle(value(org(e)), value(dest(t)), value(dest(e)), x) :
        ;; println("SWAP")
        swap(s, e)
        e = oprev(e)
      else if lprev(e) == starting-edge(s) :
        ;; println("DONE")
        return(starting-edge(s))
      else :
        ;; println("POP")
        e = lprev(onext(e))

public defn insert-edge (s:Subdivision, a:Vertex, b:Vertex) -> False|Edge :
  if trace?: println(">>> INSERT-EDGE %_ %_" % [a, b])
  label<False|Edge> return:
    match(constrained-insert-site(s, a, 0.0f), constrained-insert-site(s, b, 0.0f)) :
      (start-ea:Edge, eb:Edge) :
        var aa:Vec2 = value(org(start-ea))
        var bb:Vec2 = value(org(eb))
        val starting-edge = start-ea
        var ea:Edge = locate(s, aa)
        if aa != value(org(ea)) :
          ea = sym(ea)
        var ab:ImplicitLine = ImplicitLine2(aa, bb)
        var dd:Vec2 = bb - aa
        val last = org(eb)
        var res:False|Edge = false
        defn set-res (e:Edge) :
          ;; println("SETTING RES %_" % [e])
          set-constrained?(quad(e), true)
          res = e
        while org(ea) != last :
          ;; set ea to first edge to the right of (or aligned with)
          ;; the segment (a, b) by moving ccw around the origin of ea:
          val t = ea
          let loop () :
            if on?(ab, value(dest(ea))) and dot(value(dest(ea)) - aa, dd) > 0.0f :
              false
            else if on?(ab, value(dest(onext(ea)))) and dot(value(dest(onext(ea))) - aa, dd) > 0.0f :
              ea = onext(ea)
              loop()
            else if not cw(value(dest(ea)), bb, aa) and cw(value(dest(onext(ea))), bb, aa) :
              false
            else :
              ea = onext(ea)
              if ea == t :
                warning("insert-edge: infinite loop")
                return(false)
              loop()
          ;; check to see if an edge is already there
          if on?(ab, value(dest(ea))) :
            if trace?: println("EDGE %_ -> %_ ALREADY THERE %_" % [ea, dest(ea), abs(eval(ab, value(dest(ea))))])
            set-res(ea)
            aa = value(dest(ea))
            if aa == bb : return(ea)
            ab = ImplicitLine(aa, bb)
            dd = bb - aa
            ea = onext(sym(ea))
          else :
            let loop (t:Edge = ea) :
              if on?(ab, value(dest(lnext(t)))) :
                if lnext(lnext(lnext(t))) == ea :
                  ;; edge is already there
                  if trace?:  println("EDGE %_ ALREADY THERE" % [lnext(lnext(t))])
                  set-res(lnext(lnext(t)))
                  ea = sym(lnext(t))
                else :
                  ;; need a new edge
                  val ne = connect(s, lnext(t), ea)
                  if trace?: println("NEED NEW EDGE -- CONSTRAINING -- CONNECTING %_ TO %_" % [lnext(t), ne])
                  set-res(ne)
                  set-constrained?(quad(ne), true)
                  ea = sym(lnext(t))
                  triangulate(s, lnext(ne))
                  triangulate(s, oprev(ne))
                  ;; println("DONE TRIANGULATING")
              else if left?(ab, value(dest(lnext(t)))) :
                ;; edges cross
                if trace?: println("EDGES CROSS %_ -> %_" % [lnext(t), dest(lnext(t))])
                if not constrained?(quad(lnext(t))) :
                  if trace?: println("NOT CONSTRAINED -- DELETING EDGE")
                  delete-edge(s, lnext(t))
                  loop(t)
                else :
                  ;; the crossing edge is also constrained
                  ;; compute and insert the intersection
                  val x = intersect(lnext(t), ab)
                  ;; split lnext(t) into two at x
                  if trace?: println("CROSSING EDGE ALSO CONSTRAINED %_ SPLITTING AT %_" % [constrained?(quad(lnext(t))), x])
                  ;; println("AB %_ -> %_" % [a, b])
                  ;; println("LNEXT %_ -> %_" % [lnext(t), dest(lnext(t))])
                  split-edge(s, lnext(t), x)
                  ;; connect to eh new vertex:
                  val ne = connect(s, lnext(t), ea)
                  ;; println("SETTING CONSTRAINED? %_ -> %_" % [ne next(ne)])
                  set-res(ne)
                  ea = sym(lnext(t))
                  triangulate(s, lnext(ne))
                  triangulate(s, oprev(ne))
              else :
                loop(lnext(t))
        if trace?: println("<<< INSERT-EDGE DONE")
        res
      (fa, fb) :
        println("DIDN'T FIND %_ %_" % [fa, fb])
        false    
