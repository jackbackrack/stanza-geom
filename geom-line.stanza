defpackage geom/line :
  import core
  import geom/vec
  import geom/geom

val @doc-line = "LINE -- infinite line"

#for (Line in [Line2 Line3]
      Prim in [Double Double]
      PrimVec in [Vec2 Vec3]) :

  public defstruct Line <: Geom :
    pos: PrimVec
    dir: PrimVec

  public defn closest-point-to (l:Line, point:PrimVec) -> PrimVec :
    dot((point - pos(l)), dir(l)) * dir(l) + pos(l)

  public defn closest-point-to (l0:Line, l1:Line) -> PrimVec :
    val posLpos = pos(l0) - pos(l1)
    val c = dot(dir(l0), posLpos)
    val a = dot(dir(l1), dir(l0))
    val f = dot(dir(l1), posLpos)
    val num = c - a * f
    val denom = a * a - 1.0
    if abs(denom) < 1.0 and abs(num) >= abs(denom) * DOUBLE-MAX :
      pos(l0)
    else :
      pos(l0) + (num / denom) * dir(l0)

  public defn eval (l:Line, mag:Prim) -> PrimVec :
    pos(l) + mag * dir(l)

  public defn place (l:Line, pt:PrimVec) -> Prim :
    dot(pt - pos(l), dir(l))

  public defn line-of (p0:PrimVec, p1:PrimVec) -> Line :
    Line(p0, normalize(p1 - p0))

  defmethod print (o:OutputStream, l:Line) :
    print(o, "Line(%_, %_)" % [pos(l), dir(l)])

;; public defn extrude (p0:Vec3, p1:Vec3) -> Half :
;;   val line   = line-of(p0, p1)
;;   val normal = Vec3(y(dir(line)), (- x(dir(line))))
;;   val pt     = closest-point-to(line, Vec3(0.0, 0.0))
;;   val align  = dot(normal, normalize(pt))
;;   ;; println-all(["CLOSEST POINT TO " x(pt) "," y(pt) " NORMAL " x(normal) "," y(normal) " ALIGN " align])
;;   Half(normal, (if align > 0.0 : 1.0 else : -1.0) * len(pt))

