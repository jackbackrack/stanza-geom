#use-added-syntax(fastio-serializer)

defpackage geom/serializer :
  import core
  import collections
  ; import utils
  import geom/geom
  import geom/vec
  import geom/mat
  import geom/quat
  import geom/box
  import geom/polygon
  import geom/line-segment
  import geom/polyline
  import geom/mesh
  import geom/poseable
  import geom/assembly
  import geom/shape
  import stz/serializer

public defserializer () :

  entry-points : (
    geom
  )

  include "serializer-primitives.spec"
  
  defunion geom (Geom) :
    LineSegment2: (start:vec2, end:vec2)
    LineSegment3: (start:vec3, end:vec3)
    Contour: (vertices:tuple(vec2))
    Polygon: (state:anyshapestate, contours:tuple(geom as Contour))
    PolyLine2: (state:anyshapestate, strokes:tuple(tuple(vec2)))
    PolyLine3: (state:anyshapestate, strokes:tuple(tuple(vec3)))
    Mesh: (state:anyshapestate, vertices:tuple(vec3), faces:tuple(v3i))
    Assembly: (mat:mat4, name:opt<Symbol>(symbol), color:vec4, children:tuple(geom as Geom&Poseable))
    Msg: (value:string)
    GeomGroup: (elts:tuple(geom))
    
  deftype vec2 (Vec2) : 
    Vec2: (x:double, y:double)

  deftype vec3 (Vec3) : 
    Vec3: (x:double, y:double, z:double)

  deftype vec4 (Vec4) : 
    Vec4: (x:double, y:double, z:double, a:double)

  deftype vec2i (Vec2i) : 
    Vec2i: (x:int, y:int)

  deftype vec3i (Vec3i) : 
    Vec3i: (x:int, y:int, z:int)

  deftype box1 (Box1) : 
    Box1: (lo:double, hi:double)

  deftype box2 (Box2) : 
    Box2: (lo:vec2, hi:vec2)

  deftype box3 (Box3) : 
    Box3: (lo:vec3, hi:vec3)

  deftype box1i (Box1i) : 
    Box1i: (lo:int, hi:int)

  deftype box2i (Box2i) : 
    Box2i: (lo:v2i, hi:v2i)

  deftype box3i (Box3i) : 
    Box3i: (lo:v3i, hi:v3i)

  deftype quat (Quat) :
    Quat: (w:double, v:vec3)

  defatom mat4 (m:Mat4) :
    writer :
      for i in 0 to 16 do : write-double(m[i])
    reader :
      val elts = to-tuple $ repeatedly(read-double, 16)
      Mat4(elts[00], elts[01], elts[02], elts[03], elts[04], elts[05], elts[06], elts[07],
           elts[08], elts[09], elts[10], elts[11], elts[12], elts[13], elts[14], elts[15])

  deftype anyshapestate (AnyShapeState) :
    AnyShapeState: (name:opt<Symbol>(symbol), color:vec4, tags:tuple(symbol), poses:tuple(symvalue(mat4)))

  reader defn read-symvalue<?T> (f: () -> ?T) :
    read-symbol() => f()

  writer defn write-symvalue<?T> (f: T -> False, xs:KeyValue<Symbol,?T>) :
    write-symbol(key(xs))
    f(value(xs))

; defmethod put (s:StringBuffer, x:Byte) :
;   add(s, to-char(x))

; public defn serialize (g:Geom) -> String :
;   val out = StringBuffer()
;   serialize(out, g)
;   to-string(out)

;; defn main () :
;;   val poly-0 = polygon-n(100.0f, 16)
;;   ;; val out = FileOutputStream("tst.ser")
;;   val out = StringBuffer()
;;   serialize(out, poly-0)
;;   ;; close(out)
;;   ;; val in = FileInputStream("tst.ser")
;;   val in = StringInputStream(to-string $ out)
;;   val p0 = deserialize-geom(in)
;;   println(p0)
;;   ;; close(in)
;; 
;; main()
