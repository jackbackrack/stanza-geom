defpackage geom/half :
  import core
  import geom/vec

public defstruct Half :
  normal:   Vec3
  distance: Double

public defmethod print (o:OutputStream, g:Half) :
  print-all(o, ["half(" normal(g) "," distance(g) ")"])

public defn half (x:Double, y:Double, z:Double, d:Double) -> Half :
  Half(Vec3(x, y, z), d)

public defn half (v:Vec3, d:Double) -> Half :
  Half(v, d)

public defn half (p1:Vec3, p2:Vec3, p3:Vec3) -> Half :
  val normal = normalize((p2 - p1) % (p3 - p1))
  val distance = dot(normal, p1)
  Half(normal, distance)

;; defn times (g:Half, m:Mat44f) -> Half :
;;   var dir1:Vec3       = Vec3(1.0, 0.0, 0.0) % normal(g)
;;   var dir1-len:Double = dot(dir1, dir1)
;;   var tmp:Vec3        = Vec3(0.0, 1.0, 0.0) % normal(g)
;;   var tmp-len:Double  = dot(tmp, tmp)
;;   if tmp-len > dir1-len :
;;     dir1     = tmp
;;     dir1-len = tmp-len
;;   tmp     = Vec3(0.0,0.0, 1.0) % normal(g)
;;   tmp-len = dot(tmp, tmp)
;;   if tmp-len > dir1-len :
;;     dir1     = tmp
;;   val dir2  = dir1 % normal(g)
;;   val point = distance(g) * normal(g)
;;   half(point * m, (point + dir2) * m, (point + dir1) * m)

public defn distance-to (plane:Half, point:Vec3) -> Double :
  dot(point, normal(plane)) - distance(plane)

public defn level (g:Half, point:Vec3) -> Double :
  (- distance-to(g, point))

