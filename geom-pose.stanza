defpackage geom/pose :
  import core
  import geom/angle
  import geom/vec
  import geom/mat
  import geom/quat
  import geom/poseable
  import geom/geom

val @doc-pose = "POSE -- representing translation and rotation"

public defstruct Pose :
  mov: V3d
  rot: V3d

public defn Pose (mov:V3d) : Pose(mov, V3d(0.0, 0.0))
public defn Pose () : Pose(V3d(0.0, 0.0))

val id-Pose = Pose()

public defn to-mat44d (p:Pose) -> Mat44d :
  (quat-to-mat44d $ quat-from-euler $ degrees-to-radians $ rot(p)) * mov-mat44d(mov(p))

public defn pose-mat44d (mov:V3d, rot:V3d) -> Mat44d :
  to-mat44d $ Pose(mov, rot) 

public defn pose-mat44d (mov:V3d) : pose-mat44d(mov, V3d(0.0, 0.0, 0.0))


