defpackage geom/pose :
  import core
  import geom/angle
  import geom/vec
  import geom/mat
  import geom/quat
  import geom/poseable
  import geom/geom

val @doc-pose = "POSE -- representing translation and rotation"

public defstruct Pose :
  mov: Vec3
  rot: Vec3

public defn Pose (mov:Vec3) : Pose(mov, Vec3(0.0, 0.0))
public defn Pose () : Pose(Vec3(0.0, 0.0))

val id-Pose = Pose()

public defn to-mat4 (p:Pose) -> Mat4 :
  (quat-to-mat4 $ quat-from-euler $ degrees-to-radians $ rot(p)) * mov-mat4(mov(p))

public defn pose-mat4 (mov:Vec3, rot:Vec3) -> Mat4 :
  to-mat4 $ Pose(mov, rot) 

public defn pose-mat4 (mov:Vec3) : pose-mat4(mov, Vec3(0.0, 0.0, 0.0))


