defpackage geom/polygon :
  import core
  import math
  import collections
  import utils/seqable
  import geom/vec
  import geom/mat
  import geom/box
  import geom/line-segment
  import geom/polyline
  import geom/shape
  import geom/geom
  import geom/bounded
  import geom/poseable
  import geom/space

val @doc-contour = "CONTOUR -- closed paths"

public defstruct Contour <: Geom&Equalable :
  vertices: Tuple<Vec2>

defmethod equal? (a:Contour, b:Contour) -> True|False :
  vertices(a) == vertices(b)

public defn bounds (c:Contour) -> Box3 :
  reduce(union, neg-inf-box3(), seq(Box3{xyz(_)}, vertices(c)))

defmethod print (o:OutputStream, c:Contour) :
  val pv = to-tuple(vertices(c)[0 to 100]) when length(vertices(c)) > 100 else vertices(c)
  print(o, "Contour([%,])" % [pv])

public var *line-width* = 0.001
public defn set-line-width (x:Double) : *line-width* = x

public defn times (mat:Mat4, p:Contour) -> Contour :
  Contour(for p in vertices(p) map : mat * p)

public defn to-stroke (contour:Contour) -> Tuple<Vec2> :
  to-tuple $ cat(vertices(contour), [ vertices(contour)[0] ])

public defn segments (contour:Contour) -> Seq<LineSegment2> :
  val pts = vertices(contour)
  for i in 0 to length(pts) seq :
    LineSegment2(pts[i], pts[(i + 1) % length(pts)])

public defn area (verts:Tuple<Vec2>) -> Double :
  val a = sum $ for i in 1 through length(verts) seq :
    val [p1, p2] = [verts[i - 1], verts[i % length(verts)]]
    x(p1) * y(p2) - x(p2) * y(p1)
  ;; println("AREA %_ -> %_" % [verts, a])
  0.5 * a

public defn area (contour:Contour) -> Double :
  area(vertices(contour))

public defn area (polygon:Polygon) -> Double :
  sum $ seq(area, contours(polygon))

public defn centroid (verts:Tuple<Vec2>) -> Vec2 :
  val pts = for [p0, p1] in successive-pairs-wrapped(verts) seq :
    (x(p0) * y(p1) - x(p1) * y(p0)) * Vec2((x(p0) + x(p1)), (y(p0) + y(p1)))
  reduce(plus, pts) / (6.0 * area(verts))

public defn centroid (contour:Contour) -> Vec2 :
  centroid(vertices(contour))

public defn centroid (polygon:Polygon) -> Vec2 :
  reduce(plus, seq(centroid, contours(polygon)))

;; ;;; STROKE
;; 
;; public defstruct Stroke <: Geom :
;;   points: Tuple<Vec2>
;; 
;; defmethod print (o:OutputStream, c:Stroke) :
;;   print("Stroke(%,)" % [points(c)])
;; 
;; public defn times (mat:Mat4, p:Stroke) -> Stroke :
;;   Stroke(for p in points(p) map : mat * p)

val @doc-polygon = "POLYGON -- list of contours"

public defstruct Polygon <: AnyShape&Equalable :
  state: AnyShapeState with: (as-method => true)
  contours: Tuple<Contour>

defmethod equal? (a:Polygon, b:Polygon) -> True|False :
  contours(a) == contours(b)

public defn Polygon (contours:Seqable<Contour>) :
  Polygon(default-anyshape-state(), to-tuple $ contours)

public defn Polygon () -> Polygon :
  Polygon([])

public defn get (p:Polygon, i:Int) -> Contour : contours(p)[i]
public defn get (c:Contour, i:Int) -> Vec2 : vertices(c)[i]

public defn polygon-n (d:Double, n:Int) -> Polygon :
  val r = 0.5 * d
  val points = 
    for i in 0 to n seq :
      val a = to-double(i) * 2.0 * PI / to-double(n)
      Vec2(r * sin(a), r * cos(a))
  to-polygon(Contour(to-tuple(points)))

public defn polygon-rect (dims:Vec2) -> Polygon :
  to-polygon(Contour(to-tuple(corners(dims-to-box(dims)))))

defmethod spacer (g:Polygon, gdims:Vec3) :
  polygon-rect(xy(gdims))

public defn to-polygon (c:Contour) -> Polygon :
  Polygon([c])

public defn to-polygon (b:Box2) -> Polygon :
  to-polygon $ Contour $ corners(b)

public defn to-polyline (p:Polygon) -> PolyLine2 :
  PolyLine2(state(p), to-tuple $ seq(to-stroke, contours(p)))

defmethod clone (poly:Polygon, state:AnyShapeState) -> Polygon :
  Polygon(state, contours(poly))

public defmethod bounds (p:Polygon) -> Box3 :
  reduce(union, neg-inf-box3(), seq(bounds, contours(p)))

defmethod xyz (mat:Mat4, poly:Polygon) -> Polygon :
  Polygon(state(poly), to-tuple $ for c in contours(poly) map : mat * c)

public defn to-v2d (vals:Seqable<Double>) -> Vec2 :
  val elts = to-tuple $ vals
  Vec2(elts[0], elts[1])
  
public defn vertices (p:Polygon) -> Tuple<Vec2> :
  to-tuple $ cat-all(for c in contours(p) seq : vertices(c))

public defn segments (polygon:Polygon) -> Seq<LineSegment2> :
  cat-all(seq(segments, contours(polygon)))

public defn perimeter (polygon:Polygon) -> Double :
  sum $ seq(magnitude, segments(polygon))

public defn cat (p1:Polygon, p2:Polygon) -> Polygon :
  Polygon(cat(contours(p1), contours(p2)))

defmethod print (o:OutputStream, c:Polygon) :
  print(o, "Polygon([%,])" % [contours(c)])

defn simplify-polygon (poly-:Tuple<Vec2>, max-angle-deg:Double, max-dist:Double) -> Seqable<Vec2> :
  defn sqr (a:Double) : a * a
  val mincos = cos(max-angle-deg * PI / 180.0)
  val sqr-min-length = sqr(max-dist)
  val poly = to-vector<Vec2> $ poly-
  ;; println("MAX-ANGLE-DEG %_ MAX-DIST %_ IN %_" % [max-angle-deg, max-dist, length(poly)])
  val tmp  = Vector<Vec2>()
  defn swap () :
    clear(poly)
    add-all(poly, tmp)

  defn sqr-magnitude (v:Vec2) : dot(v, v)

  ;; Repeatedly simplify until nothing changes

  ;; println("SIMPLIFY %_ MINCOS %_" % [poly, mincos])

  label<False> return :
    while true :
      clear(tmp)
      ;; If u-v-w is collinear, remove v
      val m = length(poly)
      val changed? = let loop (i:Int = 0, changed?:True|False = false) :
        if i < m :
          val h = (i - 1 + m) % m
          val j = (i + 1) % m
          val a = poly[h] - poly[i]
          val b = poly[j] - poly[i]

          ;; println("DOT-NORM H %_ I %_ J %_ DOT %_" % [poly[h], poly[i], poly[j], dot(normalize(a), normalize(b))])
          if dot(normalize(a), normalize(b)) < mincos :
            ;; println("A")
            loop(i + 1, true)
          else :
            add(tmp, poly[i])
            loop(i + 1, changed?)
        else :
          changed?

      ;; println("STRAIGHT CHANGED? %_ TMP %_" % [changed?, length(tmp)])
      ;; println(tmp)
      if changed? :
        swap()
      else :
        ;; Collapse short edges
        clear(tmp)
        val changed? = let loop (i:Int = 0, changed?:True|False = false) :
          if i < m :
            val h = (i - 1 + m) % m
            val j = (i + 1) % m
            val k = (i + 2) % m

            if sqr-magnitude(poly[i] - poly[j]) < sqr-min-length :
              ;; Check which end point to leave intact
              val hi = normalize(poly[i] - poly[h])
              val hj = normalize(poly[j] - poly[h])
              val ik = normalize(poly[k] - poly[i])
              val jk = normalize(poly[k] - poly[j])

              if i == (m - 1) or dot(hi,hj) > dot(ik,jk) :
                ;; It's better to drop i
                ;; println("C")
                loop(i + 1, true)
              else :
                ;; It's better to drop j
                ;; println("D")
                add(tmp, poly[i])
                loop(i + 2, true)

            else :
              add(tmp, poly[i])
              loop(i + 1, changed?)
          else :
            changed?

        ;; println("SMALL CHANGED? %_ TMP %_" % [changed?, length(tmp)])
        if changed? :
          swap()
        else :
          return(false)
  poly


public defn simplify (polygon:Polygon, max-angle-deg:Double, max-dist:Double) -> Polygon :
  Polygon([Contour(to-tuple $ simplify-polygon(vertices(contours(polygon)[0]), max-angle-deg, max-dist))])

