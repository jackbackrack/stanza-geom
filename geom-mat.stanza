defpackage geom/mat :
  import core
  import math
  import geom/geom
  import geom/vec
  import geom/quat
  import geom/utils

val @doc-mat4 = "MAT4 -- 4D affine transformation matrix"

public lostanza deftype Mat4 <: Array<Double> & Equalable :
  m00: double
  m01: double
  m02: double
  m03: double
  m10: double
  m11: double
  m12: double
  m13: double
  m20: double
  m21: double
  m22: double
  m23: double
  m30: double
  m31: double
  m32: double
  m33: double

public lostanza defn Mat4 (m00:ref<Double>,m01:ref<Double>,m02:ref<Double>,m03:ref<Double>,
                             m10:ref<Double>,m11:ref<Double>,m12:ref<Double>,m13:ref<Double>,
                             m20:ref<Double>,m21:ref<Double>,m22:ref<Double>,m23:ref<Double>,
                             m30:ref<Double>,m31:ref<Double>,m32:ref<Double>,m33:ref<Double>) -> ref<Mat4> :
  return new Mat4{m00.value,m01.value,m02.value,m03.value,m10.value,m11.value,m12.value,m13.value,
                    m20.value,m21.value,m22.value,m23.value,m30.value,m31.value,m32.value,m33.value}

public defn Mat4 (m:Mat4) -> Mat4 :
  Mat4(m[0, 0], m[0, 1], m[0, 2], m[0, 3],
         m[1, 0], m[1, 1], m[1, 2], m[1, 3], 
         m[2, 0], m[2, 1], m[2, 2], m[2, 3], 
         m[3, 0], m[3, 1], m[3, 2], m[3, 3])

public defn Mat4 (m:Tuple<Double>) -> Mat4 :
  Mat4(m[ 0], m[ 1], m[ 2], m[ 3],
         m[ 4], m[ 5], m[ 6], m[ 7],
         m[ 8], m[ 9], m[10], m[11],
         m[12], m[13], m[14], m[15])
         
lostanza defn mat4-get (m:ref<Mat4>, i:ref<Int>) -> ref<Double> :
  #if-not-defined(OPTIMIZE) :
     ensure-index-in-bounds(i, new Int{16})
  return new Double{addr!(m.m00)[i.value]}

lostanza defn mat4-set (m:ref<Mat4>, i:ref<Int>, x:ref<Double>) -> ref<False> :
  #if-not-defined(OPTIMIZE) :
     ensure-index-in-bounds(i, new Int{16})
  addr!(m.m00)[i.value] = x.value
  return false

defmethod equal? (m1:Mat4, m2:Mat4) :
  label<True|False> return:
    for i in 0 to 4 do :
      for j in 0 to 4 do :
        if m1[i, j] != m2[i, j] : return(false)
    true

defmethod get (a:Mat4, i:Int) -> Double : mat4-get(a, i)
defmethod set (a:Mat4, i:Int, c:Double) -> False : mat4-set(a, i, c)
defmethod length (a:Mat4) -> Int : 16

public defn get (m:Mat4, x:Int, y:Int) -> Double :
  m[x * 4 + y]

public defn set (m:Mat4, x:Int, y:Int, v:Double) -> False :
  m[x * 4 + y] = v

defmethod print (o:OutputStream, m:Mat4) :
  print(o, "MAT(")
  for (i in 0 to 16) do :
     if i > 0 : print(o, ",")
     print(o, m[i])
  print-all(o, ")")

public defn gj-inverse (m:Mat4) -> Mat4 :
  label<Mat4> return :
    val s = id-mat4()
    val t = Mat4(m)
    for i in 0 to 3 do :
      var pivot = i
      var pivot-size:Double = t[i, i]
      if pivot-size < 0.0 :
        pivot-size = (- pivot-size)
      for j in (i + 1) to 4 do :
        var tmp:Double = t[j, i]
        if tmp < 0.0 :
          tmp = (- tmp)
        if tmp > pivot-size :
          pivot = j
          pivot-size = tmp
        if pivot-size == 0.0 :
          println(["SINGULAR"])
          ;; if singExc : throw SingMatrixExc ("Cannot invert singular matrix.")
          return(id-mat4())
        if pivot != i :
          for j in 0 to 4 do :
            var tmp = t[i, j]
            t[i, j] = t[pivot, j]
            t[pivot, j] = tmp
            tmp = s[i, j]
            s[i, j] = s[pivot, j]
            s[pivot, j] = tmp

        for j in (i + 1) to 4 do :
          val f = t[j, i] / t[i, i]
          for k in 0 to 4 do :
            t[j, k] = t[j, k] - f * t[i, k]
            s[j, k] = s[j, k] - f * s[i, k]

    ;; Backward substitution

    for i in 3 through 0 by -1 do :
      val f = t[i, i]
      if f == 0.0 :
        println-all(["SINGULAR"])
        ;; if singExc : throw(SingMatrixExc ("Cannot invert singular matrix."))
        return(id-mat4())
      for j in 0 to 4 do :
        t[i, j] = t[i, j] / f
        s[i, j] = s[i, j] / f
      for j in 0 to i do :
        val g = t[j, i]
        for k in 0 to 4 do :
          t[j, k] = t[j, k] - g * t[i, k]
          s[j, k] = s[j, k] - g * s[i, k]
    s

public defn inverse (m:Mat4) -> Mat4 :
  label<Mat4> return :
    if m[0, 3] != 0.0 or m[1, 3] != 0.0 or m[2, 3] != 0.0 or m[3, 3] != 1.0 :
      return(gj-inverse(m))
    val s = Mat4(m[1, 1] * m[2, 2] - m[2, 1] * m[1, 2],
                   m[2, 1] * m[0, 2] - m[0, 1] * m[2, 2],
                   m[0, 1] * m[1, 2] - m[1, 1] * m[0, 2],
                   0.0,

                   m[2, 0] * m[1, 2] - m[1, 0] * m[2, 2],
                   m[0, 0] * m[2, 2] - m[2, 0] * m[0, 2],
                   m[1, 0] * m[0, 2] - m[0, 0] * m[1, 2],
                   0.0,

                   m[1, 0] * m[2, 1] - m[2, 0] * m[1, 1],
                   m[2, 0] * m[0, 1] - m[0, 0] * m[2, 1],
                   m[0, 0] * m[1, 1] - m[1, 0] * m[0, 1],
                   0.0,

                   0.0,
                   0.0,
                   0.0,
                   1.0)
     val r = m[0, 0] * s[0, 0] + m[0, 1] * s[1, 0] + m[0, 2] * s[2, 0]
     if (abs(r) >= 1.0) :
       for i in 0 to 3 do :
         for j in 0 to 3 do :
           s[i, j] = s[i, j] / r
     else :
       val mr = abs(r) / DOUBLE-MIN ;; smallest
       for i in 0 to 3 do :
         for j in 0 to 3 do :
           if mr > abs(s[i, j]) :
             s[i, j] = s[i, j] / r
           else :
             println-all(["SINGULAR " m])
             ;; if singExc : throw(SingMatrixExc ("Cannot invert singular matrix."))
             return(id-mat4())
             
    s[3, 0] = (- m[3, 0]) * s[0, 0] - m[3, 1] * s[1, 0] - m[3, 2] * s[2, 0]
    s[3, 1] = (- m[3, 0]) * s[0, 1] - m[3, 1] * s[1, 1] - m[3, 2] * s[2, 1]
    s[3, 2] = (- m[3, 0]) * s[0, 2] - m[3, 1] * s[1, 2] - m[3, 2] * s[2, 2]

    s

public defn reflect-xy-mat4 () -> Mat4 :
  Mat4( 0.0,  1.0,  0.0,  0.0,
          1.0,  0.0,  0.0,  0.0,
          0.0,  0.0,  1.0,  0.0,
          0.0,  0.0,  0.0,  1.0)
 
public defn reflect-xz-mat4 () -> Mat4 :
  Mat4( 0.0,  0.0,  1.0,  0.0,
          0.0,  1.0,  0.0,  0.0,
          1.0,  0.0,  0.0,  0.0,
          0.0,  0.0,  0.0,  1.0)
 
public defn reflect-yz-mat4 () -> Mat4 :
  Mat4( 1.0,  0.0,  0.0,  0.0,
          0.0,  0.0,  1.0,  0.0,
          0.0,  1.0,  0.0,  0.0,
          0.0,  0.0,  0.0,  1.0)
 
public defn shear-x-y-mat4 (ymin:Double, ymax:Double, dx0:Double, dx1:Double) -> Mat4 :
  ;; TODO
  id-mat4()
 
public defn id-mat4 () -> Mat4 : mag-mat4(1.0)

public defn mag-mat4 (s:Double) -> Mat4 :
  Mat4(   s, 0.0, 0.0, 0.0,
         0.0,    s, 0.0, 0.0,
         0.0, 0.0,    s, 0.0,
         0.0, 0.0, 0.0, 1.0)
 
public defn mag-mat4 (s:Vec3) -> Mat4 :
  Mat4(x(s), 0.0, 0.0, 0.0,
         0.0, y(s), 0.0, 0.0,
         0.0, 0.0, z(s), 0.0,
         0.0, 0.0, 0.0, 1.0)

public defn mov-mat4 (t:Vec3) -> Mat4 :
  Mat4( 1.0, 0.0, 0.0, 0.0,
          0.0, 1.0, 0.0, 0.0,
          0.0, 0.0, 1.0, 0.0,
          t[0], t[1], t[2], 1.0)

public defn rot-mat4 (r:Vec3) -> Mat4 :
  val cos_rz = cos(r[2])
  val cos_ry = cos(r[1])
  val cos_rx = cos(r[0])

  val sin_rz = sin(r[2])
  val sin_ry = sin(r[1])
  val sin_rx = sin(r[0])

  val m00 = cos_rz * cos_ry
  val m01 = sin_rz * cos_ry
  val m02 = (- sin_ry)
  val m10 = (- sin_rz) * cos_rx + cos_rz * sin_ry * sin_rx
  val m11 = cos_rz * cos_rx + sin_rz * sin_ry * sin_rx
  val m12 = cos_ry * sin_rx
  val m20 = (- sin_rz) * (- sin_rx) + cos_rz * sin_ry * cos_rx
  val m21 = cos_rz * (- sin_rx) + sin_rz * sin_ry * cos_rx
  val m22 = cos_ry * cos_rx

  Mat4( m00,  m01,  m02, 0.0,
          m10,  m11,  m12, 0.0,
          m20,  m21,  m22, 0.0,
          0.0,  0.0,  0.0, 1.0)

public defn rot-mat4 (axis:Vec3, angle:Double) -> Mat4 :
  if abs(sin(angle)) < 1.0e-06 :
    id-mat4()
  else :
    quat-to-mat4(quat-from-axis(normalize(axis), angle))

public defn rot-mat4 (b:Vec3, a:Vec3) -> Mat4 :
  val ang = angle(a, b)
  val cross = a % b
  if magnitude(cross) <= 1.0e-06 :
    mag-mat4(1.0 when abs(ang) <= 1.0e-06 else -1.0)
    ;; val e = Vec3-unit(min-idx(abs(a)))
    ;; e - dot(e, a) * a
  else :
    rot-mat4(cross, ang)

public defn rot-mat4 (start:Tuple<Vec3>, end:Tuple<Vec3>) -> Mat4 :
  ;; val world = [x3(1.0), y3(1.0), z3(1.0)]
  Mat4(  dot(end[0], start[0]), dot(end[0], start[1]), dot(end[0], start[2]), 0.0, 
         dot(end[1], start[0]), dot(end[1], start[1]), dot(end[1], start[2]), 0.0, 
         dot(end[2], start[0]), dot(end[2], start[1]), dot(end[2], start[2]), 0.0, 
                           0.0,                   0.0,                   0.0, 1.0)

public defn rot-mat4 (src:Vec2, dst:Vec2) -> Mat4 :
  val a = atan2(y(dst), x(dst)) - atan2(y(src), x(src))
  val [c, s] = [cos(a), sin(a)]
  Mat4(    c    s 0.0 0.0
         (- s)    c 0.0 0.0
          0.0 0.0 1.0 0.0
          0.0 0.0 0.0 1.0)

public defn rot-mat4 (end:Tuple<Vec3>) -> Mat4 :
  val world = [x3(1.0), y3(1.0), z3(1.0)]
  rot-mat4(world, end)

public defn rot-mat4 (m:Mat4) -> Mat4 :
  Mat4(m[ 0], m[ 1], m[ 2], 0.0,
         m[ 4], m[ 5], m[ 6], 0.0,
         m[ 8], m[ 9], m[10], 0.0,
          0.0,  0.0,  0.0, 1.0)
          
public defn times (m:Mat4, v:Vec3) -> Vec3 :
  val px = x(v) * m[0,0] + y(v) * m[1,0] + z(v) * m[2,0] + m[3,0]
  val py = x(v) * m[0,1] + y(v) * m[1,1] + z(v) * m[2,1] + m[3,1]
  val pz = x(v) * m[0,2] + y(v) * m[1,2] + z(v) * m[2,2] + m[3,2]
  val pw = x(v) * m[0,3] + y(v) * m[1,3] + z(v) * m[2,3] + m[3,3]
  Vec3(px / pw, py / pw, pz / pw)

public defn times (m:Mat4, v:Vec2) -> Vec2 :
  val px = x(v) * m[0,0] + y(v) * m[1,0] + m[3,0]
  val py = x(v) * m[0,1] + y(v) * m[1,1] + m[3,1]
  val pw = x(v) * m[0,3] + y(v) * m[1,3] + m[3,3]
  Vec2(px / pw, py / pw)

public defn times (a:Mat4, b:Mat4) -> Mat4 :
  val res = id-mat4()
  for i in 0 to 4 do :
    for j in 0 to 4 do :
      var sum: Double = 0.0
      for k in 0 to 4 do :
        sum = sum + a[i,k] * b[k,j]
      res[i, j] = sum
  res

